# Generated by Django 5.1.3 on 2025-04-02 07:55

from django.db import migrations
from django.conf import settings # Import settings

# --- Crucial Function ---
def create_profiles_for_existing_users(apps, schema_editor):
    """
    Creates UserProfile instances for all existing Users
    that don't already have one.
    Sets the initial tenant to None (as the model allows null=True).
    """
    # Use historical models! Don't import directly from your models.py
    User = apps.get_model(settings.AUTH_USER_MODEL) # Use the configured user model
    UserProfile = apps.get_model('api', 'UserProfile') # Use 'your_app_name', 'ModelName'

    # Get users without a profile
    # This is more efficient than iterating all users and checking one by one
    users_without_profiles = User.objects.filter(profile__isnull=True)

    profiles_to_create = []
    for user in users_without_profiles:
        # Create profile instance without saving yet (bulk_create is faster)
        profiles_to_create.append(
            UserProfile(user=user, tenant=None) # Set tenant=None initially
        )

    # Create all missing profiles in a single query if possible
    if profiles_to_create:
        UserProfile.objects.bulk_create(profiles_to_create)
        print(f"\n  Created {len(profiles_to_create)} UserProfile instances.")
    else:
        print("\n  No missing UserProfile instances found.")


# --- Optional but Recommended: Reverse Function ---
def delete_profiles(apps, schema_editor):
    """
    Deletes all UserProfile instances.
    This assumes that before this migration, no UserProfiles existed.
    Be cautious if UserProfiles could have been created by other means
    between the previous migration and this one.
    """
    UserProfile = apps.get_model('api', 'UserProfile')
    count, _ = UserProfile.objects.all().delete()
    if count > 0:
         print(f"\n  Deleted {count} UserProfile instances.")


class Migration(migrations.Migration):

    dependencies = [
        # Ensure this depends on the migration that CREATED UserProfile
        ('api', '0020_tenant_chatbot_tenant_faq_tenant_faqcategory_tenant_and_more_squashed_0024_delete_tenantgroup'),
        # Also depend explicitly on the AUTH_USER_MODEL's app if it's custom
        # Example: ('users', '000X_previous_user_migration'),
        # But since you used migrations.swappable_dependency in 0001,
        # Django usually figures this out. Including the previous 'tenants'
        # migration is the most important dependency here.
        migrations.swappable_dependency(settings.AUTH_USER_MODEL), # Good practice to keep it
    ]

    operations = [
        # Add the RunPython operation
        migrations.RunPython(
            create_profiles_for_existing_users, # Function to run forwards
            reverse_code=delete_profiles       # Function to run backwards (optional but good)
        ),
    ]