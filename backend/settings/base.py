"""
Django settings for djangoHeroku project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import logging
import dj_database_url
from pathlib import Path
import os
from backend.api.languages import Language

SENTRY_DSN = os.getenv('SENTRY_DSN')

if SENTRY_DSN:
    import sentry_sdk

    sentry_sdk.init(
        dsn=SENTRY_DSN,
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for tracing.
        traces_sample_rate=0.0,
    )

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

MEDIA_URL = '/api/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'amqp://guest:guest@rabbitmq:5672/')
CELERY_RESULT_BACKEND = 'cache+memory://'
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_IMPORTS = ('backend.tasks',)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY',"django-inseffefwefwfethrthrthh#q1ao6_^)4*brwc!w!81ii-@2=52$_fgh")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

def split_domains(env_key):
  raw = os.environ.get(env_key, "")
  if raw == "":
      return []
  # split on commas, strip whitespace
  return [d.strip() for d in raw.split(",") if d.strip()]

CHATBOT_HOSTS = split_domains("CHATBOT_HOST")
WEBSITE_HOSTS = split_domains("WEBSITE_HOST")

# Host settings
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    "backend-hw-chatbot.localhost",
] + CHATBOT_HOSTS

# CSRF settings (with protocols)
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8088',
    'http://localhost:5173',
    *[f"https://{domain}" for domain in CHATBOT_HOSTS],
]

# CORS settings (with protocols)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://localhost:8080",
    "http://localhost:8088",
    "http://frontend-hw-chatbot.localhost",
    "http://frontend-dev-hw-chatbot.localhost",
    "http://backend-hw-chatbot.localhost",
    *[f"https://{domain}" for domain in CHATBOT_HOSTS],
    *[f"https://{domain}" for domain in WEBSITE_HOSTS],
]
CORS_ALLOW_CREDENTIALS = False

SITE_ID = 1

# Application definition

INSTALLED_APPS = [
    "modeltranslation",
    "backend.stats",
    "django_scopes",
    "backend.api",
    "jazzmin",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django_celery_beat",
    "whitenoise.runserver_nostatic",  # < Per Whitenoise, to disable built in runserver in dev
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "drf_spectacular",
    "crawler",
    "graphql",
    "demo",
    "revproxy",
    'health_check',
    'health_check.db',
    'health_check.cache',
    'health_check.storage',
    'health_check.contrib.migrations',
    'extra_settings',
    #'health_check.contrib.celery', # TODO: figure out the celery healhchecks are not working
    #'health_check.contrib.celery_ping',
    #'health_check.contrib.rabbitmq',
    'webdav.apps.WebdavConfig',  # WebDAV-Paket
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # allow access from diffferent origin for web clients
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    'backend.utils.middleware.TenantAdminScopeMiddleware',
    'backend.utils.middleware.PublicApiScopeMiddleware',  # Add the new middleware for public API endpoints
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'django.middleware.locale.LocaleMiddleware',
    #"backend.utils.OpenAIClientMiddleware"
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            "dist",
            os.path.join(BASE_DIR, 'crawler', 'templates'),
            os.path.join(BASE_DIR, 'backend', 'templates'),
            os.path.join(BASE_DIR, 'hw_rag', 'templates'),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases


DATABASES = {
    'default': dj_database_url.config(
        default=os.getenv('DATABASE_URL', 'mysql://root:345efbdfhd@db:3306/backend'),
        conn_max_age=600,
    )
}

MONGODB_URL = os.environ.get('MONGODB_URL', 'mongodb://admin:23t41r344gh@mongodb:27017/rag?authSource=admin')

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    #    {
    #        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    #    },
    #    {
    #        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    #    },
    #    {
    #        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    #    },
    #    {
    #        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    #    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "de-de"
TIME_ZONE = "Europe/Berlin"
USE_I18N = True
USE_L10N = True
USE_TZ = True

gettext = lambda s: s
LANGUAGES = tuple((lang.value, gettext(lang.label)) for lang in Language)
LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale')]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

# When Vue Builds, path will be `/static/css/...` so we will have Django Serve
# In Production, it's recommended use an alternative approach such as:
# http://whitenoise.evans.io/en/stable/django.html?highlight=django

MIDDLEWARE_CLASSES = (
    "whitenoise.middleware.WhiteNoiseMiddleware",
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"

# Place static in the same location as webpack build files
STATIC_ROOT = os.path.join(BASE_DIR, "dist", "static")
STATICFILES_DIRS = ["public"]

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Default Django REST framework settings
# https://www.django-rest-framework.org/api-guide/settings/
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'Chat API',
    'DESCRIPTION': 'API for the Chatbot application',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}

JAZZMIN_SETTINGS = {
    # Updated values from EXTRA_SETTINGS_DEFAULTS
    "site_title": "HW Chatbot",
    "login_logo": None,
    "welcome_sign": "Login zur Administration des digitalen Assistenten:",
    "site_icon": "favicon.ico",
    "site_logo": None,
    "site_header": "Digitaler Assistent",
    "site_brand": "HW Chatbot",
    "copyright": "Helm&Walter IT-Solutions",


    "topmenu_links": [
        {"name": "Dashboard",  "url": "admin:index", "permissions": ["auth.view_user"]},
        {"name": "H&W Support", "url": "https://helmundwalter.de/#contact-form", "new_window": True},
    ],
}

# EXTRA_SETTINGS_DEFAULTS referencing the final values in JAZZMIN_SETTINGS
EXTRA_SETTINGS_DEFAULTS = [
    {
        "name": "JAZZMIN_SITE_TITLE",
        "type": "string",
        "value": JAZZMIN_SETTINGS["site_title"],
    },
    {
        "name": "JAZZMIN_LOGIN_LOGO",
        "type": "image",
        "value": JAZZMIN_SETTINGS["login_logo"],
    },
    {
        "name": "JAZZMIN_SITE_LOGO",
        "type": "image",
        "value": JAZZMIN_SETTINGS["site_logo"],
    },
    {
        "name": "JAZZMIN_WELCOME_SIGN",
        "type": "string",
        "value": JAZZMIN_SETTINGS["welcome_sign"],
    },
    {
        "name": "JAZZMIN_SITE_ICON",
        "type": "image",
        "value": JAZZMIN_SETTINGS["site_icon"],
    },
    {
        "name": "JAZZMIN_SITE_HEADER",
        "type": "string",
        "value": JAZZMIN_SETTINGS["site_header"],
    },
    {
        "name": "JAZZMIN_SITE_BRAND",
        "type": "string",
        "value": JAZZMIN_SETTINGS["site_brand"],
    },
    {
        "name": "JAZZMIN_COPYRIGHT",
        "type": "string",
        "value": JAZZMIN_SETTINGS["copyright"],
    }
]

class HealthCheckFilter(logging.Filter):
    def filter(self, record):
        try:
            if hasattr(record, 'args') and len(record.args) >= 1:
                request_path = str(record.args[0])  # Convert PosixPath to string if needed
                if '/ht/' in request_path:
                    return False
        except (AttributeError, IndexError, TypeError):
            pass
        return True

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {
            "format": "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
        },
    },
    'filters': {
        'exclude_health_check': {
            '()': 'backend.settings.HealthCheckFilter',
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "standard",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "django.server": {  # Make sure this logger is explicitly defined
            "handlers": ["console"],
            "level": "INFO",
            "filters": ['exclude_health_check'],
            "propagate": False,
        },
        "backend.api": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
        "hw_rag": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
        "revproxy": {
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": False,
        },

    },
}

CRAWLER_RESULT_COLLECTION_NAME = "discovered_documents"
RAG_IMAGE_COLLECTION_NAME = "images"

# Qdrant settings (optional, if you want to keep them in settings)
QDRANT_HOST = "qdrant"
QDRANT_PORT = 6333

MATOMO_ENDPOINT = os.environ.get('MATOMO_URL', 'http://matomo:8080/')
MATOMO_SITE_ID = 1
MATOMO_TOKEN='18e7a346839342a89c753389eb792c7b'

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://redis:6379/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}
