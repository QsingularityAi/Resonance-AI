import type { InjectionKey } from 'vue-demi';
import type { Language } from '@padcom/vue-i18n-common';
import type { Ref } from 'vue-demi';
import { Translations } from '@padcom/vue-i18n-common';

/**
 * vue-i18n context creator
 *
 * Enables providing the translation context in case you want
 * to have another context in part of your system or if you
 * are wrapping your component tree in a common web component.
 *
 * Counterpart to the i18n plugin
 */
export declare function createI18Context({ locale, fallbackLocale, messages, pluralizationRules, }: CreateI18Options): {
    locale: Ref<string>;
    fallbackLocale: Ref<string>;
};

/**
 * Initialize the global i18n instance
 */
export declare function createI18n({ locale, fallbackLocale, messages, pluralizationRules, }?: CreateI18Options): {
    locale: string;
    fallbackLocale: string;
    readonly availableLocales: string[];
    t(key: string, context?: Object & Record<string, any>): string;
    tc(key: string, choice: number, context?: Object & Record<string, any>): string;
};

export declare interface CreateI18Options {
    locale?: string;
    fallbackLocale?: string;
    messages?: Translations;
    pluralizationRules?: PluralizationRules;
}

export declare function getAgentLocale(defaultLocale?: string): string;

export declare type PluralizationRule = (choice: number, numberOfAvailableChoices: number) => number;

export declare type PluralizationRules = Record<Language, PluralizationRule>;

export declare type Scope = 'local-first' | 'local' | 'global';

export { Translations }

/**
 * Enables the use of translation in composables and setup function
 */
export declare function useI18n({ useScope }?: UseI18nOptions): {
    fallbackLocale: Ref<string>;
    locale: Ref<string>;
    readonly availableLocales: string[];
    t(key: string, context?: Object & Record<string, any>): string;
    tc(key: string, choice: number, context?: Object & Record<string, any>): string;
};

/**
 * Options for `useI18n` composition function
 */
declare interface UseI18nOptions {
    /**
     * Defines translation resolution strategy
     *
     * - `local-first` means use local translations and if the given key
     *   is not found try global scope (default)
     * - `local` means only use local translations.
     * - `global` means only use global translations.
     */
    useScope?: Scope;
}

export declare const VueI18NFallbackLocaleSymbol: InjectionKey<Ref<string>>;

export declare const VueI18NLocaleSymbol: InjectionKey<Ref<string>>;

export declare const VueI18NPluralizationRulesSymbol: InjectionKey<PluralizationRules>;

export declare const VueI18NTranslationsSymbol: InjectionKey<Translations>;

export { }
